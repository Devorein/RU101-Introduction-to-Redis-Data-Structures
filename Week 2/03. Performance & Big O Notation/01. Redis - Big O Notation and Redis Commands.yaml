subject: Redis
topic: Big O Notation and Redis Commands
questions:
  - question: What is the time complexity of the `SADD` command ?
    answers: 0
    options:
      - O(1)
      - O(N)
      - O(LogN)
  - question: When a redis command executes is atomicity guaranteed ?
    answers: 0
    options:
      - Yes
      - No
  - question:
      -
      - ensures that either a
      - fully completes or in case of a
      - the state of the system is returned back to the state before the command was executed
    answers:
      - atomicity
      - command
      - failure
  - question:
      - Redis uses
      - thread for all
      - execution
    answers:
      - single
      - command
  - question: Does the redis server execute each command one by one ?
    answers: 0
    options:
      - Yes
      - No
  - question: Does the redis client wait while the server processes the current command ?
    answers: 0
    options:
      - Yes
      - No
  - question: Which one of the following Big O Notation has the steepest curve ?
    answers: 0
    options:
      - O(N^3)
      - O(N^1/2)
      - O(LogN)
      - O(N)
  - question: Which of the following commands have Time complexity of O(1)
    answers:
      - 0
      - 1
      - 2
      - 3
    options:
      - "`get`"
      - "`set`"
      - "`hget`"
      - "`lpush`"
      - "`ltrim`"
      - "`zcard`"
  - question: Which of the following Big O Notation does not depend on the cardinality of the data structure
    answers: 0
    type: MS
    options:
      - O(1)
      - O(N)
      - O(LogN)
      - O(N^3)
  - question: Does have the same time complexity ensure that two commands will take the same time to execute ?
    answers: 0
    options:
      - No
      - Yes
  - question: Which of the following list commands doesn't depend on the cardinality of the list?
    answers:
      - 0
      - 1
      - 2
      - 4
    options:
      - "`lpush`"
      - "`rpush`"
      - "`rpop`"
      - "`lpop`"
      - "`ltrim`"
      - "`lindex`"
  - question: What is the time complexity of the `del key1 key2 ...keyN` command, where all keys hold a string ?
    answers: 0
    options:
      - O(N)
      - O(1)
      - O(LogN)
      - O(N^3)
  - question: What is the time complexity of the `del key1` command, where key1 holds a string ?
    answers:
      text: 0
      explanation: Removing a single key always takes constant time
    options:
      - O(1)
      - O(N)
      - O(LogN)
      - O(N^3)
  - question: What is the time complexity of the `del list1` command which contains M elements
    answers:
      text: 0
      explanation: Since all the items of the list has to be removed, thus the time complexity depends on the cardinality of the list
    options:
      - O(M)
      - O(1)
      - O(LogM)
      - O(M^3)
  - question: Cleanup of memory associated with data structure is handled by which thread for `unlink` command
    answers:
      - text: 0
        explanation: Since its asynchronous, its handled by a background thread
    options:
      - Background thread
      - Main thread
  - question: What is the time complexity of the `sinter` command, where M is the number of sets and N is the lowest cardinality of the sets ?
    answers:
      text: 0
      explanation: The time complexity depends on the number of set and the cardinality of the lowest set
    options:
      - O(M*N)
      - O(M+N)
      - O(M-N)
      - O(M/N)
  - question: What is the time complexity of the `sinter` command on `set1` with 2 members, and `set2` with 5 members
    answers: 4
  - question: What is the time complexity of the `lrange` command, where S is the number of members requested and N is the offset ?
    options:
      - O(N+S)
      - O(N*S)
      - O(N-S)
      - O(|N-S|)
    answers:
      text: 0
      explanation: Its `N+S` since at first N elements have to be traversed, and `S` elements has to be extracted from the list
  - question: |
      What is the time complexity of the `lrange` command

      ```shell
      rpush list1 a b c d e f g h
      lrange list1 4 6
      ```
    answers:
      text: 7
      explanation: 4 elements have to be traversed to get the elements that has to be extracted, which stands at `(6 - 4 + 1) = 3` elements. So `4 + 3 = 7`
